#!/usr/bin/env zsh
# --------------------------------------------------------------------------
#   ZSH → CLI → FFMPEG
#   @see https://bit.ly/2AD7bYb
# --------------------------------------------------------------------------

function convert-audio {
	# Exit without error if no arguements are provided.
	if [ $# -eq 0 ]; then
		log-error "No arguments provided. Please provide both an input and output format without punctuation.";
	fi

	# If a second argument is not provided, default to settings for `.mp3`.
	if [ $2 -eq 0 ]; then
		AUD_CONTAINER="mp3"
	else
		AUD_CONTAINER=$2
	fi

	# Set appropriate audio codex for the intended container.
	case $2 in
		mka | webm | ogg | caf)
			AUD_CODEX="libopus"
		;;
		mp3)
			AUD_CODEX="libmp3lame"
		;;
		wav)
			AUD_CODEX="pcm_s16le"
		;;
		aac | m4a)
			AUD_CODEX="libfdk_aac"
		;;
		*)
			AUD_CODEX=""
		;;
	esac

	# Loop through options that match the input format; convert to output format.
	for i in *.$1; do
		ffmpeg -i $i -c:a $AUD_CODEX -f $AUD_CONTAINER $(basename "${i/.$1}").$AUD_CONTAINER;
		sleep 5;
	done
}
# Aliases for `convert-audio`.
alias ffmpeg-audio='convert-audio';
alias ffmpeg-convert-audio='convert-audio';

function convert-video {
	# Exit without error if no arguements are provided.
	if [ $# -eq 0 ]; then
		log-error "No arguments provided. Please provide both an input and output format without punctuation.";
	fi

	# If a second argument is not provided, default to settings for `.mp4`.
	if [ $2 -eq 0 ]; then
		VID_CONTAINER="mp4"
	else
		VID_CONTAINER=$2
	fi

	# Set appropriate audio codex for the intended container.
	case $2 in
		webm | mkv)
			AUD_CODEC="libopus"
			VID_CODEC="libvpx-vp9"
		;;
		mp4 | *)
			AUD_CODEC="libmp3lame"
			VID_CODEC="libx264"
		;;
	esac

	# Loop through input files and convert to desired output.
	for i in *.$1 ; do
		ffmpeg -i $i -c:v $VID_CODEC -pass 1 -b:v 1500K -threads 8 -speed 4 -tile-columns 6 -frame-parallel 1 -an -f $VID_CONTAINER null/
		ffmpeg -i $i -c:v $VID_CODEC -pass 2 -b:v 1500K -threads 8 -speed 1 -tile-columns 6 -frame-parallel 1 -auto-alt-ref 1 -lag-in-frames 25 -c:a $AUD_CODEC -b:a 64k -f $VID_CONTAINER $(basename "${i/.$1}").$VID_CONTAINER;
		sleep 5;
	done
}

# Aliases for `convert-video`.
alias ffmpeg-video='convert-video';
alias ffmpeg-convert-video='convert-video';

# Convert HEIF to JPG
# @see https://pypi.org/project/heif-convert/
function convert-heif {
	heif-convert $1.heif $1.jpg
}

# Convert HEIC to JPG
# @see https://pypi.org/project/heif-convert/
function convert-heic {
	heif-convert $1.heic $1.jpg
}
