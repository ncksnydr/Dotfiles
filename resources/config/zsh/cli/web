# --------------------------------------------------------------------------
#   ZSH → CLI → Web
#   @see https://bit.ly/2AD7bYb
# --------------------------------------------------------------------------


# Creates a Codepen folder and three inital files.
function build-codepen {
	SANDBOX='/Users/nick/Sites/sandbox/codepen';
	mkdir -p $SANDBOX/$1;
	cp $SANDBOX/index.html $SANDBOX/$1/index.html;
	cp $SANDBOX/index.js $SANDBOX/$1/index.js;
	cp $SANDBOX/index.scss $SANDBOX/$1/index.scss;
}

# Flushes the DNS cache.
# @usage flush-dns
alias flush-dns='dscacheutil -flushcache && killall -HUP mDNSResponder';
alias clear-dns='flush-dns';
alias dns-clear='flush-dns';


# Return all the names (CNs and SANs) listed in the SSL certificate for a given domain.
# @usage get-certificate-names github.com
# @returns Common Name: github.com \n Subject Alternative Name(s): github.com www.github.com
function get-certificate-names {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}…";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}
alias get-cert-names='get-certificate-names';
alias cert-names='get-certificate-names';


# Returns the current public IP address.
# @usage get-ip
# @returns 12.34.567.89
alias get-ip="dig +short myip.opendns.com @resolver1.opendns.com"


# Returns active network interfaces.
# @usage get-network-interfaces
alias get-network-interfaces="ifconfig | pcregrep -M -o '^[^\t:]+:([^\n]|\n\t)*status: active'"
alias network-interfaces='get-network-interfaces';


# Removes all `vendor` and `node_modules` directories and files (relative to the current directory).
# @see ./create/create-archive
function remove-vendor-files {
	find . -name {node_modules,vendor} -type d -exec rm -r {} +;
	log-success "All vendor and node_modules directories removed.";
}