# --------------------------------------------------------------------------
#   ZSH → Log
#   A custom set of functions for pretty logging.
#   @note Usually I organize both files and functions alphabetically,
#         however this file is ordered by importance and/or hierarchy
#         for the functions themselves (e.g. "intro" comes first).
# --------------------------------------------------------------------------


#   Sectional separators
# ------------------------------------------------------------
# Log intro flag; should be used once per script.
# @usage log-intro "Hello world".
log-intro() {
  printf "${bold}${bg_magenta}${white}      $1      ${reset}\n\n";
}


# Log header text; should be used for each script section.
# @usage log-header "Hello world".
log-header() {
  printf "\n${bold}${bg_magenta}${white}==========  %s  ==========${reset}\n" "$@"
}


# Log note; should be used for listing items.
# @usage log-note "Hello world".
log-note() {
  printf "${bold}${white}➜${reset}  ${white}%s${reset}\n" "$@"
}


# Log warning message.
# @usage log-warning "Hello world".
log-warning() {
  printf "${tan}➜ %s${reset}\n" "$@"
}


# Log error message.
# @usage log-error "Hello world".
log-error() {
	printf "\n";
  printf "${underline}${bold}${red}✖ ERROR ${reset}\n"
	printf "${red}%s${reset}\n" "------------------------------";
  printf "${red}%s${reset}\n" "$@";
  printf "\n";
  exit 1;
}


# Log success message.
# @usage log-success "Hello world".
log-success() {
  printf "\n";
  printf "${green}_____________________________________________%s${reset}\n"
  printf "${green}✔ %s${reset}\n" "$@"
}



#   Inline styling
# ------------------------------------------------------------
# Log bold.
# @usage log-bold "Hello world".
log-bold() {
  printf "${bold}%s${reset}\n" "$@"
}

# Log underlined text.
# @usage log-underlined-text "Hello world".
log-underlined-text() {
  printf "${underline}${bold}%s${reset}\n" "$@"
}
